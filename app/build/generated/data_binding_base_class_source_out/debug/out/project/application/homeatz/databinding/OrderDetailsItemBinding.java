// Generated by view binder compiler. Do not edit!
package project.application.homeatz.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import project.application.homeatz.R;

public final class OrderDetailsItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView cuisineTv;

  @NonNull
  public final TextView foodTypeTv;

  @NonNull
  public final TextView itemAmountTv;

  @NonNull
  public final ImageView nonVegImg;

  @NonNull
  public final TextView prdctNameTv;

  private OrderDetailsItemBinding(@NonNull LinearLayout rootView, @NonNull TextView cuisineTv,
      @NonNull TextView foodTypeTv, @NonNull TextView itemAmountTv, @NonNull ImageView nonVegImg,
      @NonNull TextView prdctNameTv) {
    this.rootView = rootView;
    this.cuisineTv = cuisineTv;
    this.foodTypeTv = foodTypeTv;
    this.itemAmountTv = itemAmountTv;
    this.nonVegImg = nonVegImg;
    this.prdctNameTv = prdctNameTv;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrderDetailsItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrderDetailsItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.order_details_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrderDetailsItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cuisine_tv;
      TextView cuisineTv = ViewBindings.findChildViewById(rootView, id);
      if (cuisineTv == null) {
        break missingId;
      }

      id = R.id.food_type_tv;
      TextView foodTypeTv = ViewBindings.findChildViewById(rootView, id);
      if (foodTypeTv == null) {
        break missingId;
      }

      id = R.id.item_amount_tv;
      TextView itemAmountTv = ViewBindings.findChildViewById(rootView, id);
      if (itemAmountTv == null) {
        break missingId;
      }

      id = R.id.nonVeg_img;
      ImageView nonVegImg = ViewBindings.findChildViewById(rootView, id);
      if (nonVegImg == null) {
        break missingId;
      }

      id = R.id.prdct_name_tv;
      TextView prdctNameTv = ViewBindings.findChildViewById(rootView, id);
      if (prdctNameTv == null) {
        break missingId;
      }

      return new OrderDetailsItemBinding((LinearLayout) rootView, cuisineTv, foodTypeTv,
          itemAmountTv, nonVegImg, prdctNameTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
