// Generated by view binder compiler. Do not edit!
package project.application.homeatz.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import project.application.homeatz.R;

public final class TestLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText edt1;

  @NonNull
  public final EditText edt2;

  @NonNull
  public final EditText edt3;

  @NonNull
  public final EditText edt4;

  @NonNull
  public final EditText edt5;

  @NonNull
  public final EditText edt6;

  @NonNull
  public final TextView tvOtp;

  private TestLayoutBinding(@NonNull LinearLayout rootView, @NonNull EditText edt1,
      @NonNull EditText edt2, @NonNull EditText edt3, @NonNull EditText edt4,
      @NonNull EditText edt5, @NonNull EditText edt6, @NonNull TextView tvOtp) {
    this.rootView = rootView;
    this.edt1 = edt1;
    this.edt2 = edt2;
    this.edt3 = edt3;
    this.edt4 = edt4;
    this.edt5 = edt5;
    this.edt6 = edt6;
    this.tvOtp = tvOtp;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TestLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TestLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.test_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TestLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.edt_1;
      EditText edt1 = ViewBindings.findChildViewById(rootView, id);
      if (edt1 == null) {
        break missingId;
      }

      id = R.id.edt_2;
      EditText edt2 = ViewBindings.findChildViewById(rootView, id);
      if (edt2 == null) {
        break missingId;
      }

      id = R.id.edt_3;
      EditText edt3 = ViewBindings.findChildViewById(rootView, id);
      if (edt3 == null) {
        break missingId;
      }

      id = R.id.edt_4;
      EditText edt4 = ViewBindings.findChildViewById(rootView, id);
      if (edt4 == null) {
        break missingId;
      }

      id = R.id.edt_5;
      EditText edt5 = ViewBindings.findChildViewById(rootView, id);
      if (edt5 == null) {
        break missingId;
      }

      id = R.id.edt_6;
      EditText edt6 = ViewBindings.findChildViewById(rootView, id);
      if (edt6 == null) {
        break missingId;
      }

      id = R.id.tv_otp;
      TextView tvOtp = ViewBindings.findChildViewById(rootView, id);
      if (tvOtp == null) {
        break missingId;
      }

      return new TestLayoutBinding((LinearLayout) rootView, edt1, edt2, edt3, edt4, edt5, edt6,
          tvOtp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
